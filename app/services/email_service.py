import logging
import requests
from typing import Optional
from app.core.config import settings

logger = logging.getLogger(__name__)

def send_email_via_postmark(to_email: str, subject: str, html_body: str, text_body: Optional[str] = None, **kwargs) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ Postmark API
    
    Args:
        to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        html_body: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        text_body: –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è) # <- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    if not settings.POSTMARK_API_TOKEN:
        logger.error("Postmark API token not configured")
        return False
    
    if text_body is None:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ HTML (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        text_body = html_body.replace('<br>', '\n').replace('<br/>', '\n')
        text_body = text_body.replace('</p>', '\n\n').replace('</div>', '\n')
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        import re
        text_body = re.sub('<.*?>', '', text_body)
    
    payload = {
        "From": settings.POSTMARK_SENDER_EMAIL,
        "To": to_email,
        "Subject": subject,
        "HtmlBody": html_body,
        "TextBody": text_body,
        "MessageStream": "outbound"
    }
    
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "X-Postmark-Server-Token": settings.POSTMARK_API_TOKEN
    }
    
    try:
        response = requests.post(
            "https://api.postmarkapp.com/email",
            json=payload,
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            logger.info(f"Email sent successfully to {to_email}")
            return True
        else:
            logger.error(f"Postmark API error: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to send email to {to_email}: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error sending email: {str(e)}")
        return False


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ª–æ–≥ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ email
def send_email_via_postmark_stub(to_email: str, subject: str, html_body: str, text_body: Optional[str] = None):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ª–æ–≥–∏—Ä—É–µ—Ç –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    logger.info(f"üìß EMAIL STUB: Would send to {to_email}")
    logger.info(f"üìß Subject: {subject}")
    logger.info(f"üìß Content length: {len(html_body)} chars")
    return True


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
# send_email_via_postmark = send_email_via_postmark_stub