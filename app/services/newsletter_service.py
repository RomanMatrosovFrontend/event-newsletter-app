import logging
from sqlalchemy.orm import Session
from typing import List
from app.models import User, NewsletterLog
from app.utils.event_matcher import get_events_for_user
from app.services.email_service import send_email_via_postmark
from app.services.template_service import template_service

logger = logging.getLogger(__name__)

def send_newsletter_to_all_users(db: Session):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    import time  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞

    logger.info("üéØ Starting newsletter campaign...")
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).filter(User.is_subscribed == True).all()
        total_users = len(users)
        logger.info(f"üìã Found {total_users} subscribed users.")

        successful = 0
        failed = 0

        # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
        for user in users:
            logger.info(f"   üë§ Processing user: {user.email} (ID: {user.id})")
            try:
                # 2.1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                events = get_events_for_user(db, user)
                logger.info(f"      ‚úÖ Found {len(events)} events for user.")

                if events:
                    # 2.2. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!
                    subject = f"–ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—Å!"
                    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
                    html_body = f"<h1>–ü—Ä–∏–≤–µ—Ç!</h1><p>–î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ {len(events)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.</p>"
                    html_body += "<ul>"
                    for event in events:
                        html_body += f"<li><a href='{event.url}'>{event.title}</a> ({event.dates})</li>"
                    html_body += "</ul>"

                    # 2.3. –í–´–ó–û–í –†–ï–ê–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò!
                    logger.info(f"      üì§ Attempting to send email to {user.email}...")
                    email_sent = send_email_via_postmark(
                        to_email=user.email,
                        subject=subject,
                        html_body=html_body
                    )

                    if email_sent:
                        logger.info(f"      üì© Email successfully sent to {user.email}")
                        successful += 1
                    else:
                        logger.error(f"      ‚ùå Failed to send email to {user.email}")
                        failed += 1
                else:
                    logger.info(f"      ‚ÑπÔ∏è  No events for user {user.email}. Skipping.")
                    successful += 1  # –ù–µ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–±—ã—Ç–∏–π –∑–∞ –æ—à–∏–±–∫—É

            except Exception as e:
                failed += 1
                logger.error(f"      ‚ö†Ô∏è  Failed to process user {user.email}: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                continue

        # 3. –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        duration_seconds = time.time() - start_time

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        log = NewsletterLog(
            total_users=total_users,
            successful_sends=successful,
            failed_sends=failed,
            duration_seconds=duration_seconds  # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —á–∏—Å–ª–æ!
        )
        db.add(log)
        db.commit()
        logger.info(f"üìä Newsletter finished! Success: {successful}, Failed: {failed}, Duration: {duration_seconds:.2f}s")

        return successful, failed

    except Exception as e:
        logger.error(f"üí• Critical error in newsletter service: {str(e)}")
        return 0, 0

def send_newsletter_to_users(db: Session, user_ids: List[int]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    import time
    start_time = time.time()

    logger.info(f"üéØ Starting targeted newsletter for {len(user_ids)} users...")
    
    successful = 0
    failed = 0

    for user_id in user_ids:
        try:
            user = db.query(User).filter(User.id == user_id, User.is_subscribed == True).first()
            if not user:
                logger.warning(f"User {user_id} not found or unsubscribed")
                continue

            events = get_events_for_user(db, user)
            logger.info(f"   ‚úÖ Found {len(events)} events for user {user.email}")

            if events:
                subject = f"–ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—Å!"
                html_body = f"<h1>–ü—Ä–∏–≤–µ—Ç!</h1><p>–î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ {len(events)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.</p>"
                html_body += "<ul>"
                for event in events:
                    html_body += f"<li><a href='{event.url}'>{event.title}</a> ({event.dates})</li>"
                html_body += "</ul>"

                email_sent = send_email_via_postmark(
                    to_email=user.email,
                    subject=subject,
                    html_body=html_body
                )

                if email_sent:
                    successful += 1
                else:
                    failed += 1
            else:
                logger.info(f"      ‚ÑπÔ∏è  No events for user {user.email}. Skipping.")
                successful += 1

        except Exception as e:
            failed += 1
            logger.error(f"      ‚ö†Ô∏è  Failed to process user {user_id}: {str(e)}")
            continue

    duration_seconds = time.time() - start_time
    logger.info(f"üìä Targeted newsletter finished! Success: {successful}, Failed: {failed}")
    
    return successful, failed